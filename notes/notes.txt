Link formatter (kebab-case) library: lodash

To pass information to a page: 
app.post (/origin) {redirect /destination}
app.get (/destination) {render => pass desired key:values}

--- MONGO DB ---
create database: use <DB_NAME>
show databases: show dbs
create collection: db.<COLLECTION_NAME>
show collections: show collections
delete collection: db.<COLLECTION_NAME>.drop()
insert data into collection: db.<COLLECTION_NAME>.insertOne({<KEYS_VALUES>})
show all data: db.<COLLECTION_NAME>.find()
show query data: db.<COLLECTION_NAME>.find(<QUERY>)
add column: db.products.updateOne({<QUERY>}, {$set: {<COLUMN>: <VALUE>}})
delete database: db.dropDatabase()

To stop server service: sudo pkill -f mongod
To start mongo server service: mongod

- Validation
const fruitSchema = new Schema({
    name: {
        type: String,
        required: [true, `Don't have ideas?`]
    },
    rating: {
        type: Number,
        min: [1, 'At least one star please'],
        max: [10, '{VALUE} is to much love!']
    },
    review: String
});

apple.save().then(result => {
    log(result);
}).catch(err => {
    log(err.message);
});


--- Promises & callbacks ---

- try -> catch

apple.save().then(result => {
    log(result);
}, err => {
    log(err._message);
})

apple.save().then(result => {
    log(result);
}).catch(err => {
    log(err._message);
});

- With callback

Fruit.insertMany([apple, kiwi, orange, banana], (err) => {
    if (err) log(err);
    else log('Saved fruits');
});

const cursor = Person.find({ occupation: /host/ }).cursor();

for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {
  console.log(doc); // Prints documents one at a time
}